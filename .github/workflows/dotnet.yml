# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: install dotnet-scanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage
      - name: Sonar Begin
        run: dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT }}
         /o:${{ secrets.SONAR_ORGANIZATION }} 
         /d:sonar.token=${{ secrets.SONAR_TOKEN }} 
         /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }}
         /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
      - name: Build
        run: dotnet build
      - name: Test Coverage
        run: dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
      - name: Sonar End
        run : dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}

  push-docker-image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build --file Dockerfile --tag $IMAGE_NAME .
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION